<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>笑松小站</title>
  <subtitle>写我喜欢 读我所爱</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.seoui.com/"/>
  <updated>2017-04-18T09:25:59.989Z</updated>
  <id>http://blog.seoui.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mesos环境搭建</title>
    <link href="http://blog.seoui.com/2017/04/18/mesosinstall/"/>
    <id>http://blog.seoui.com/2017/04/18/mesosinstall/</id>
    <published>2017-04-17T16:00:00.000Z</published>
    <updated>2017-04-18T09:25:59.989Z</updated>
    
    <content type="html"><![CDATA[<p>  最近有一个实时的采集系统需求，目前的实现方式是用分布式定时任务来处理这一采集请求,希望有更多资源能够为任务分担压力，支持动态添加或者移除任务资源 从而达到提高采集效率，所以准备采用<code>Mesos</code>来做资源调度的工作。</p>
<p>  因为自己硬件设备不够好的原因导致安装Mesos的时候出现了一个未知的问题 记录一下，以下是参考官方Getting Started的示例。</p>
<h4 id="获取源码"><a href="#获取源码" class="headerlink" title="获取源码"></a>获取源码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">wget http://www.apache.org/dist/mesos/1.2.0/mesos-1.2.0.tar.gz</div><div class="line"></div><div class="line">tar -zxf mesos-1.2.0.tar.gz</div></pre></td></tr></table></figure>
<h4 id="安装所需依赖"><a href="#安装所需依赖" class="headerlink" title="安装所需依赖"></a>安装所需依赖</h4><p> 由于本机是Ubuntu 14.04 如果是其他的系统请参考 <a href="http://mesos.apache.org/gettingstarted/" target="_blank" rel="external">http://mesos.apache.org/gettingstarted/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> </div><div class="line">apt-get update</div><div class="line"> </div><div class="line">apt-get install -y tar wget git</div><div class="line"></div><div class="line">apt-get install -y openjdk-7-jdk</div><div class="line"></div><div class="line">apt-get install -y autoconf libtool</div><div class="line"></div><div class="line">apt-get -y install build-essential python-dev python-virtualenv libcurl4-nss-dev  libsasl2-dev libsasl2-modules maven libapr1-dev libsvn-dev</div></pre></td></tr></table></figure>
<h4 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">cd mesos-1.2.0</div><div class="line"></div><div class="line">./bootstrap</div><div class="line"></div><div class="line">mkdir build</div><div class="line"></div><div class="line">cd build</div><div class="line"></div><div class="line">../configure</div><div class="line"></div><div class="line">make -j3</div></pre></td></tr></table></figure>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">make check</div><div class="line"></div><div class="line">make install</div></pre></td></tr></table></figure>
<h4 id="测试例子"><a href="#测试例子" class="headerlink" title="测试例子"></a>测试例子</h4><p>从官方示例复制 可以运行<br>指定IP的时候 如果需要外网访问可以设置具体的IP, 设置为127.0.0.1 只能用127.0.0.1的IP访问。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line"># Start Mesos master (ensure work directory exists and has proper permissions).</div><div class="line">$ ./bin/mesos-master.sh --ip=127.0.0.1 --work_dir=/var/lib/mesos</div><div class="line"></div><div class="line"># Start Mesos agent (ensure work directory exists and has proper permissions).</div><div class="line">$ ./bin/mesos-agent.sh --master=127.0.0.1:5050 --work_dir=/var/lib/mesos</div><div class="line"></div><div class="line"># Visit the Mesos web page.</div><div class="line">$ http://127.0.0.1:5050</div><div class="line"></div><div class="line"># Run C++ framework (exits after successfully running some tasks).</div><div class="line">$ ./src/test-framework --master=127.0.0.1:5050</div><div class="line"></div><div class="line"># Run Java framework (exits after successfully running some tasks).</div><div class="line">$ ./src/examples/java/test-framework 127.0.0.1:5050</div><div class="line"></div><div class="line"># Run Python framework (exits after successfully running some tasks).</div><div class="line">$ ./src/examples/python/test-framework 127.0.0.1:5050</div></pre></td></tr></table></figure>
<p><code>需要注意的是</code> 安装之前要保证差不多2-4个GB的内存，不然在编译的时候总是报一些莫名奇妙的错误。还要保证安装之前要把依赖库安装好。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  最近有一个实时的采集系统需求，目前的实现方式是用分布式定时任务来处理这一采集请求,希望有更多资源能够为任务分担压力，支持动态添加或者移除任务资源 从而达到提高采集效率，所以准备采用&lt;code&gt;Mesos&lt;/code&gt;来做资源调度的工作。&lt;/p&gt;
&lt;p&gt;  因为自己硬件设
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Mesos" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/Mesos/"/>
    
    
      <category term="技术栈" scheme="http://blog.seoui.com/tags/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>我的2017技术栈</title>
    <link href="http://blog.seoui.com/2017/03/06/2017-target/"/>
    <id>http://blog.seoui.com/2017/03/06/2017-target/</id>
    <published>2017-03-05T16:00:00.000Z</published>
    <updated>2017-03-06T09:11:44.952Z</updated>
    
    <content type="html"><![CDATA[<p>  2017年已经过了差不多六分之一 为了给自己制定了一个技术计划(算是小目标吧)，所以在这里引导一下，<br>  当迷茫的时候可以look look!!!</p>
<h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul>
<li><p>搜索相关</p>
<p> 1、elasticsearch </p>
<p> 2、lucene </p>
<p> 3、solr</p>
</li>
<li><p>大数据相关</p>
<p> 1、Hadoop</p>
<p> 2、Spark</p>
<p> 3、Storm 如果时间够多也研究一下</p>
</li>
<li><p>远程调用/网络相关</p>
<p>  1、mina</p>
<p>  2、netty</p>
<p>  3、dubbo 尽量根据现有业务做一些扩展和调整</p>
<p>  4、thrift</p>
<p>  5、grpc</p>
</li>
<li><p>基础相关</p>
<p> 1、提升算法能力等。</p>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><p>因为平时工作大部分时间都是在折腾后端的东西 前端逐渐遗忘了，所以打算从新好好学习一下。</p>
<p>HTML5/CSS3 、ES6、requirejs、bootstarap、seajs、以及响应式应用等。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>尽量能用docker带来的便捷使用各种dev环境，在语言方面准备学习NodeJS 、Groovy、<br>Scala 、Python。<br>包管理工具gradle以及持续集成相关的技术。</p>
<p>另外在性能测试方面入手学习JMeter，移动相关学习一下混合开发。</p>
<p>要领悟的东西远远不止于这些 慢慢来 我不急…</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  2017年已经过了差不多六分之一 为了给自己制定了一个技术计划(算是小目标吧)，所以在这里引导一下，&lt;br&gt;  当迷茫的时候可以look look!!!&lt;/p&gt;
&lt;h3 id=&quot;后端&quot;&gt;&lt;a href=&quot;#后端&quot; class=&quot;headerlink&quot; title=&quot;后端
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="技术栈" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
    
      <category term="技术栈" scheme="http://blog.seoui.com/tags/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB搭建ReplSet复制集群</title>
    <link href="http://blog.seoui.com/2017/01/11/mongodb-rs/"/>
    <id>http://blog.seoui.com/2017/01/11/mongodb-rs/</id>
    <published>2017-01-10T16:00:00.000Z</published>
    <updated>2017-01-11T08:44:59.955Z</updated>
    
    <content type="html"><![CDATA[<p> MongoDB的复制集是一个主从复制模式 又具有故障转移的集群，任何成员都有可能是<code>master</code>，<br> 当master挂掉用会很快的重新选举一个节点来充当master。</p>
<p> 复制集中的组成主要成员</p>
<ul>
<li>Primary<br> <code>数据读写 master节点</code></li>
<li>Secondary<br> <code>备份Primary的数据 默认设置下 不可读 不可写</code></li>
<li>arbiter<br> <code>投票节点 此节点不会存数据 只参与投票 ，当primary节点出现异常挂掉之后 arbiter节点负责从secondary
  节点中选举一个节点升级为Primary节点</code></li>
</ul>
<p>其中可以设置Secondary节点可读，让Primary节点负责写，这些就实现了一个高效简单的读写分离。<br><a id="more"></a></p>
<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>以3个实例来演示一下复制集群的搭建过程 分别为:127.0.0.1:12345,127.0.0.1:12346,127.0.0.1:12347。<br>需要预先创建好各目录的文件夹 不然启动的时候会报错，这里还有一个坑是 pidfilepath配置项必须是绝对路径，<br>否则也会报错，replSet在同一个复制集中也需要具有一致的名称。</p>
<p>注意在旧版本中是使用的是master slave模式 目前使用的是3.4官方不支持使用这种方式，<br>官方希望使用replset代替master slave。所以当你配置master或者slave的时候就会报错。</p>
<p>127.0.0.1:12345配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">port=12345</div><div class="line">fork=true</div><div class="line">dbpath=data/12345</div><div class="line">logpath=log/12345/mongod.log</div><div class="line">httpinterface=true</div><div class="line">rest=true</div><div class="line">logappend=true</div><div class="line">pidfilepath=/home/collect/mongodb-linux-x86_64-rhel70-3.4.1/log/12345/12345.pid</div><div class="line">replSet=mydbCenter</div><div class="line">oplogSize=512</div></pre></td></tr></table></figure>
<p>127.0.0.1:12346配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">port=12346</div><div class="line">fork=true</div><div class="line">dbpath=data/12346</div><div class="line">logpath=log/12346/mongod.log</div><div class="line">httpinterface=true</div><div class="line">rest=true</div><div class="line">logappend=true</div><div class="line">pidfilepath=/home/collect/mongodb-linux-x86_64-rhel70-3.4.1/log/12346/12346.pid</div><div class="line">replSet=mydbCenter</div><div class="line">oplogSize=512</div></pre></td></tr></table></figure>
<p>127.0.0.1:12346配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">port=12347</div><div class="line">fork=true</div><div class="line">dbpath=data/12347</div><div class="line">logpath=log/12347/mongod.log</div><div class="line">httpinterface=true</div><div class="line">rest=true</div><div class="line">logappend=true</div><div class="line">pidfilepath=/home/collect/mongodb-linux-x86_64-rhel70-3.4.1/log/12347/12347.pid</div><div class="line">replSet=mydbCenter</div><div class="line">oplogSize=512</div></pre></td></tr></table></figure>
<p>分别启动好3个实例之后，随便进入一个实例 </p>
<h4 id="初始化复制集群"><a href="#初始化复制集群" class="headerlink" title="初始化复制集群"></a>初始化复制集群</h4><p>首先创建1个配置对象 在js中就是一个简单的对象 、json串</p>
<pre><code class="shell">var rs_conf={
        &quot;_id&quot; : &quot;mydbCenter&quot;,
        &quot;members&quot; : [
                {
                        &quot;_id&quot; : 0,
                        &quot;host&quot; : &quot;127.0.0.1:12345&quot;
                },
                {
                        &quot;_id&quot; : 1,
                        &quot;host&quot; : &quot;127.0.0.1:12346&quot;
                },
                {
                        &quot;_id&quot; : 2,
                        &quot;host&quot; : &quot;127.0.0.1:12347&quot;
                }
        ]
}
</code></pre>
<p>把配置应用到集群</p>
<pre><code class="shell">rs.initiate(rs_conf)
</code></pre>
<p>这里有一个限制就是需要集群的节点中不能有数据 需要先清空一下 不然<code>initiate</code>的时候会出错。<br>配置成功后使用<code>rs.status()</code>命令查看各节点状态，一些正常 就能看到各节点的状态信息</p>
<pre><code class="shell">rs.status()
</code></pre>
<p>搭建好复制集群之后命令行的标识符会变为相应的成员类型如</p>
<pre><code class="shell">mydbCenter:PRIMARY&gt; 
mydbCenter:SECONDARY&gt;
</code></pre>
<p>这也是检验集群是否搭建的成功的一个小标识。  </p>
<p>接着可以尝试一下在Primary中写入一条数据。这条数据会立即同步到各个Secondary节点中。<br>当然前面也说过默认情况的Secondary不可读 会报下面的错误。</p>
<pre><code class="shell">{
        &quot;ok&quot; : 0,
        &quot;errmsg&quot; : &quot;not master and slaveOk=false&quot;,
        &quot;code&quot; : 13435,
        &quot;codeName&quot; : &quot;NotMasterNoSlaveOk&quot;
}
</code></pre>
<p>所以需要在Secondary中执行</p>
<pre><code class="shell">db.getMongo().setSlaveOk()
</code></pre>
<p>在网络上看到有很多帖子说只要在Primary节点中执行 db.getMongo().setSlaveOk()<br>就能在Secondary节点中读取数据，但是在3.4版本试了一下是不行的。需要在Secondary中执行一下<br><code>db.getMongo().setSlaveOk()</code>让Secondary可读。</p>
<h4 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h4><p>如果现在已经有搭建好一个复制集群了 老板想多加一台备份机器进去 怎么办？<br>只需要启动好新机器的实例后 在Primary中调用rs.add() 方法即可</p>
<pre><code class="shell">rs.add({&quot;host&quot; : &quot;127.0.0.1:12348&quot;})
</code></pre>
<p>添加投票节点调用<code>rs.addArb()</code>方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; MongoDB的复制集是一个主从复制模式 又具有故障转移的集群，任何成员都有可能是&lt;code&gt;master&lt;/code&gt;，&lt;br&gt; 当master挂掉用会很快的重新选举一个节点来充当master。&lt;/p&gt;
&lt;p&gt; 复制集中的组成主要成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Primary&lt;br&gt; &lt;code&gt;数据读写 master节点&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Secondary&lt;br&gt; &lt;code&gt;备份Primary的数据 默认设置下 不可读 不可写&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;arbiter&lt;br&gt; &lt;code&gt;投票节点 此节点不会存数据 只参与投票 ，当primary节点出现异常挂掉之后 arbiter节点负责从secondary
  节点中选举一个节点升级为Primary节点&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中可以设置Secondary节点可读，让Primary节点负责写，这些就实现了一个高效简单的读写分离。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="MongoDB" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://blog.seoui.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>jdk1.7 Fork/Join并行框架学习</title>
    <link href="http://blog.seoui.com/2017/01/09/jdk7-forkjoin/"/>
    <id>http://blog.seoui.com/2017/01/09/jdk7-forkjoin/</id>
    <published>2017-01-08T16:00:00.000Z</published>
    <updated>2017-01-09T06:08:07.704Z</updated>
    
    <content type="html"><![CDATA[<p> 首先看一下ForkJoin相关的几个API </p>
<ul>
<li>ForkJoinPool<br> <code>实现了forkjoin的线程池</code></li>
<li>ForkJoinWorkerThread<br> <code>forkjoin的线程</code></li>
<li>ForkJoinTask<br>  <code>forkjoin任务的父类 这是一个抽象类</code></li>
<li>RecursiveAction<br>  <code>无返回结果的任务接口</code></li>
<li>RecursiveTask<br>  <code>有返回结果的任务接口</code><a id="more"></a>
</li>
</ul>
<p>ForkJoinPool继承自AbstractExecutorService类 说明了 ForkJoinPool和ThreadPoolExecutor<br>差不多是同父的兄弟类 ，因为ThreadPoolExecutor也继承自AbstractExecutorService类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@sun</span>.misc.Contended</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinPool</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span></span></div></pre></td></tr></table></figure>
<p> 下面以一个简单的例子来说明一下使用方法</p>
<p> 定义一个task实现类</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> THRESHOLD = <span class="number">10</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.start = start;</div><div class="line">        <span class="keyword">this</span>.end = end;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>((end - start) &lt; THRESHOLD)&#123;</div><div class="line">            sum=calSingle();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">int</span> middle = (start + end) /<span class="number">2</span>;</div><div class="line">            Calculator task1 = <span class="keyword">new</span> Calculator(start, middle);</div><div class="line">            Calculator task2 = <span class="keyword">new</span> Calculator(middle + <span class="number">1</span>, end);</div><div class="line">            <span class="comment">//首先拆分任务</span></div><div class="line">            task2.fork();</div><div class="line">            <span class="keyword">int</span> i=task2.join();</div><div class="line">            <span class="keyword">int</span> i2=task1.invoke();</div><div class="line"> <span class="comment">//           invokeAll(task1,task2);</span></div><div class="line"><span class="comment">//            int i=task1.getRawResult();</span></div><div class="line"><span class="comment">//            int i2=task2.getRawResult();</span></div><div class="line">            <span class="comment">//聚合</span></div><div class="line">            sum=i+i2;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">calSingle</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start; i&lt;= end;i++)&#123;</div><div class="line">            sum += i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> sum;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试main函数类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line"></div><div class="line">        Calculator calculator=<span class="keyword">new</span> Calculator(<span class="number">0</span>,<span class="number">500</span>);</div><div class="line"></div><div class="line">        ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</div><div class="line">        ForkJoinTask&lt;Integer&gt; f=pool.submit(calculator);</div><div class="line"></div><div class="line">        <span class="keyword">long</span> start=System.currentTimeMillis();</div><div class="line"></div><div class="line">        System.out.println(System.currentTimeMillis()-start+<span class="string">"MS"</span>);</div><div class="line">        <span class="keyword">do</span>&#123;</div><div class="line">            <span class="keyword">if</span>(calculator.isCompletedNormally()) &#123;</div><div class="line">            System.out.println(<span class="string">"计算完成 正在关闭Fork/Join池..."</span>);</div><div class="line">            pool.shutdown();</div><div class="line">        &#125;</div><div class="line">        &#125;<span class="keyword">while</span>(!calculator.isDone());</div><div class="line">        System.out.println(<span class="string">"计算结果为："</span>+f.get());</div><div class="line">        System.out.println(<span class="string">"线程已经从另一个线程偷取到的时间数:"</span>+pool.getStealCount());</div><div class="line">        System.out.println(<span class="string">"是否已经完成执行:"</span>+pool.isTerminated());</div><div class="line">        System.out.println(<span class="string">"并行的级别："</span>+pool.getParallelism());</div><div class="line">        System.out.println(<span class="string">"线程池的worker线程的数量："</span>+pool.getPoolSize());</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"执行的任务数："</span>+pool.getQueuedTaskCount());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是Fork/Join的为了充分减少等待时间 默认使用的是LIFO策略，所以我们在执行第一个任务的<br>时候尽量不要fork。具体原因还不是很理解，因为在invokeAll方法中也是这样子处理的。invokeAll源码如下<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeAll</span><span class="params">(ForkJoinTask&lt;?&gt; t1, ForkJoinTask&lt;?&gt; t2)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> s1, s2;</div><div class="line">    t2.fork();</div><div class="line">    <span class="keyword">if</span> ((s1 = t1.doInvoke() &amp; DONE_MASK) != NORMAL)</div><div class="line">        t1.reportException(s1);</div><div class="line">    <span class="keyword">if</span> ((s2 = t2.doJoin() &amp; DONE_MASK) != NORMAL)</div><div class="line">        t2.reportException(s2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先Fork第二个任务。然后在执行第一个任务,其次是join第二个任务。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 首先看一下ForkJoin相关的几个API &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ForkJoinPool&lt;br&gt; &lt;code&gt;实现了forkjoin的线程池&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ForkJoinWorkerThread&lt;br&gt; &lt;code&gt;forkjoin的线程&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ForkJoinTask&lt;br&gt;  &lt;code&gt;forkjoin任务的父类 这是一个抽象类&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;RecursiveAction&lt;br&gt;  &lt;code&gt;无返回结果的任务接口&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;RecursiveTask&lt;br&gt;  &lt;code&gt;有返回结果的任务接口&lt;/code&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="Fork/Join" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/Fork-Join/"/>
    
    
      <category term="Fork/Join" scheme="http://blog.seoui.com/tags/Fork-Join/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB常用操作</title>
    <link href="http://blog.seoui.com/2017/01/08/mongodbCommonoper/"/>
    <id>http://blog.seoui.com/2017/01/08/mongodbCommonoper/</id>
    <published>2017-01-07T16:00:00.000Z</published>
    <updated>2017-01-09T06:14:47.813Z</updated>
    
    <content type="html"><![CDATA[<p> 以下是在3.4.1版本中 其他版本可能略有区别,mongo默认登录时在test数据中。</p>
<h3 id="数据库相关操作"><a href="#数据库相关操作" class="headerlink" title="数据库相关操作"></a>数据库相关操作</h3><p>登录到数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bin/mongo --port 27017</div></pre></td></tr></table></figure>
<p>查看数据库列表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">show dbs</div></pre></td></tr></table></figure>
<p>选择使用哪个数据库 类似mysql中的use,使用use后 创建的table默认会在当前使用的数据中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">use taoxs</div></pre></td></tr></table></figure>
<p>查看当前使用的数据库使用db或者db.getName()一样的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">db </div><div class="line"></div><div class="line">db.getName()</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>显示当前数据库下的所有table(集合)<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">show tables</div></pre></td></tr></table></figure></p>
<h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><p>向taoxs_c1集合插入一行数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt;db.taoxs_c1.insert(&#123;name:&apos;abc&apos;,sex:&apos;1&apos;&#125;)</div><div class="line"> WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</div></pre></td></tr></table></figure></p>
<p>查询all<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; db.taoxs_c1.find()</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5871d9173c7ab1b751cfda4f&quot;), &quot;name&quot; : &quot;abc&quot;, &quot;sex&quot; : &quot;1&quot; &#125;</div></pre></td></tr></table></figure></p>
<p>查询指定列<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; db.taoxs_c1.find(&#123;&#125;，&#123;name:true&#125;)</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5871d9173c7ab1b751cfda4f&quot;), &quot;name&quot; : &quot;abc&quot; &#125;</div></pre></td></tr></table></figure></p>
<p>查询count<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; db.taoxs_c1.find().count()</div><div class="line">1</div></pre></td></tr></table></figure></p>
<p>查询限制行数limit<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; db.taoxs_c1.find().limit(5)</div></pre></td></tr></table></figure></p>
<p>查询时忽略数据行数 可以用skip和limit配置实现分页的效果<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; db.taoxs_c1.find().skip(5)</div></pre></td></tr></table></figure></p>
<p>结果排序 1：升序，-1：降序<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; db.taoxs_c1.find().sort(&#123;name:1&#125;)</div></pre></td></tr></table></figure></p>
<p>修改name 的值为dfg<br><code>默认情况下 只会只会修改第一行 ，会覆盖掉其他字段 也就是说在修改name的时候sex字段也会被覆盖掉</code><br>update方法签名：function (query, obj, upsert, multi)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; db.taoxs_c1.update(&#123;name:&apos;abc&apos;&#125;,&#123;$set:&#123;name:&apos;dfg&apos;&#125;&#125;)</div></pre></td></tr></table></figure>
<p>如果需要多行删除需要指定multi参数为true 如果需要upsert 需要指定upsert参数为true</p>
<p>删除操作<br><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&gt; db.taoxs_c1.remove(&#123;name:&apos;dfg&apos;&#125;)</div></pre></td></tr></table></figure></p>
<p>mongodb中常用的条件查询类似sql中的where中条件符</p>
<table>
<thead>
<tr>
<th>字符</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>$lt</td>
<td style="text-align:center">&lt;</td>
</tr>
<tr>
<td>$gt</td>
<td style="text-align:center">&gt;</td>
</tr>
<tr>
<td>$lte</td>
<td style="text-align:center">&lt;=</td>
</tr>
<tr>
<td>$gte</td>
<td style="text-align:center">&gt;=</td>
</tr>
<tr>
<td>$ne</td>
<td style="text-align:center">!=</td>
</tr>
<tr>
<td>$in</td>
<td style="text-align:center">包含</td>
</tr>
<tr>
<td>$nin</td>
<td style="text-align:center">不包含</td>
</tr>
<tr>
<td>$all</td>
<td style="text-align:center">匹配所有</td>
</tr>
<tr>
<td>$exists</td>
<td style="text-align:center">属性是否存在</td>
</tr>
<tr>
<td>$size</td>
<td style="text-align:center">属性值size判断</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 以下是在3.4.1版本中 其他版本可能略有区别,mongo默认登录时在test数据中。&lt;/p&gt;
&lt;h3 id=&quot;数据库相关操作&quot;&gt;&lt;a href=&quot;#数据库相关操作&quot; class=&quot;headerlink&quot; title=&quot;数据库相关操作&quot;&gt;&lt;/a&gt;数据库相关操作&lt;/h3&gt;&lt;p&gt;登录到数据库&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;bin/mongo --port 27017&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看数据库列表&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;show dbs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;选择使用哪个数据库 类似mysql中的use,使用use后 创建的table默认会在当前使用的数据中&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;use taoxs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;查看当前使用的数据库使用db或者db.getName()一样的。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;db &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;db.getName()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="MongoDB" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/MongoDB/"/>
    
    
      <category term="MongoDB" scheme="http://blog.seoui.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>nginx编译安装</title>
    <link href="http://blog.seoui.com/2016/11/24/nginxMakeInstall/"/>
    <id>http://blog.seoui.com/2016/11/24/nginxMakeInstall/</id>
    <published>2016-11-23T16:00:00.000Z</published>
    <updated>2016-11-24T07:51:32.095Z</updated>
    
    <content type="html"><![CDATA[<p>nginx是比较常用的高性能HTTP服务器和反向代理服务器，许多用户更是把做反向代理使用，<br>常言道：好记性不如烂笔头 时间久了总是有些遗忘，本文记录一下源码编码安装以及常用模块的使用介绍。<br><a id="more"></a></p>
<h3 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h3><pre><code class="shell">tar -zxf nginx-1.7.3.tar.gz
cd nginx-1.7.3/
groupadd -r nginx
useradd -g nginx -s /sbin/nologin -M nginx
#创建tmp文件夹 不然安装后启动会报错
mkdir -pv /var/tmp/nginx/{proxy,client,fcgi,uwsgi,scgi}

./configure \
    --prefix=/usr/local/nginx \
    --sbin-path=/usr/sbin/nginx \
    --conf-path=/etc/nginx/nginx.conf \
    --error-log-path=/var/log/nginx/error.log \
    --http-log-path=/var/log/nginx/access.log \
    --pid-path=/var/run/nginx/nginx.pid  \
    --lock-path=/var/lock/nginx.lock \
    --user=nginx \
    --group=nginx \
    --with-http_ssl_module \
    --with-http_flv_module \
    --with-http_stub_status_module \
    --with-http_gzip_static_module \
    --http-client-body-temp-path=/var/tmp/nginx/client/ \
    --http-proxy-temp-path=/var/tmp/nginx/proxy/ \
    --http-fastcgi-temp-path=/var/tmp/nginx/fcgi/ \
    --http-uwsgi-temp-path=/var/tmp/nginx/uwsgi \
    --http-scgi-temp-path=/var/tmp/nginx/scgi \
    --with-pcre

    make
    make install
</code></pre>
<p> 到此简单的安装算是完成了。</p>
<h3 id="常用模块配置"><a href="#常用模块配置" class="headerlink" title="常用模块配置"></a>常用模块配置</h3><h4 id="nginx-status"><a href="#nginx-status" class="headerlink" title="nginx status"></a>nginx status</h4><pre><code class="shell">location /nginx_status 
{
    stub_status on;
    access_log off;
}
</code></pre>
<p>配置好后重新启动nginx   <code>curl localhost/nginx_status</code> 查看状态<br>如果出现无法识别stub_status的时候可能是安装的时候没有安装http_stub_status_module模块。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx是比较常用的高性能HTTP服务器和反向代理服务器，许多用户更是把做反向代理使用，&lt;br&gt;常言道：好记性不如烂笔头 时间久了总是有些遗忘，本文记录一下源码编码安装以及常用模块的使用介绍。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="nginx" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/nginx/"/>
    
    
      <category term="nginx" scheme="http://blog.seoui.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq安装</title>
    <link href="http://blog.seoui.com/2016/10/29/rabbitmqInstall/"/>
    <id>http://blog.seoui.com/2016/10/29/rabbitmqInstall/</id>
    <published>2016-10-28T16:00:00.000Z</published>
    <updated>2016-11-11T02:11:09.828Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装rabbitmq"><a href="#安装rabbitmq" class="headerlink" title="安装rabbitmq"></a>安装rabbitmq</h3><p>采用源码安装方式,首先去官网拉取源代码并解压,由于rabbitmq是采用erlang编写的 所以得先安装erlang环境,这里假设erlang环境已经安装好了。</p>
<pre><code class="shell">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.4.0/rabbitmq-server-3.4.0.tar.gz

tar -zxf rabbitmq-server-3.4.0.tar.gz
</code></pre>
<a id="more"></a>
<p>编译并安装   这里把安装的目录设置为/opt/reabbitmq</p>
<pre><code class="shell">cd rabbitmq-server-3.4.0

make

make install TARGET_DIR=/opt/rabbitmq SBIN_DIR=/opt/rabbitmq/sbin MAN_DIR=/opt/rabbitmq/man DOC_INSTALL_DIR=/opt/rabbitmq/doc
</code></pre>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>设置环境变量 也可以包装为一个服务的方式存在 这里设置一下环境变量就好了。</p>
<pre><code class="shell">
export RABBITMQ_HOME=/opt/rabbitmq
export PATH=$RABBITMQ_HOME/sbin:$PATH
#设置好之后 需要source一下才能生效
</code></pre>
<p>启动web管理插件 mq服务</p>
<pre><code class="shell">
rabbitmq-plugins enable rabbitmq_management
#启动mq
rabbitmq-server start
</code></pre>
<p>到这里基本的安装已经完成此时可以 可以在本机使用<code>localhost:15672</code>访问了,rabbitmq内置了一个用户<code>guest/guest</code>不过只能用localhost访问。</p>
<p>如果想让其他机器也能访问管理web页面 需要关闭防火墙并创建另外的用户。</p>
<h3 id="简单常用命令"><a href="#简单常用命令" class="headerlink" title="简单常用命令"></a>简单常用命令</h3><p>添加用户</p>
<pre><code class="shell">
rabbitmqctl add_user  admin  admin
</code></pre>
<p>为用户赋予角色 </p>
<p>在rabbitmq中角色有<code>administrator</code>、<code>monitoring</code> 、<code>management</code>、<code>policymaker</code>、<code>none</code>。</p>
<pre><code class="shell">#为admin 赋予administrator角色
rabbitmqctl set_user_tags   admin  administrator
</code></pre>
<p>查看用户列表</p>
<pre><code class="shell">rabbitmqctl list_users
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装rabbitmq&quot;&gt;&lt;a href=&quot;#安装rabbitmq&quot; class=&quot;headerlink&quot; title=&quot;安装rabbitmq&quot;&gt;&lt;/a&gt;安装rabbitmq&lt;/h3&gt;&lt;p&gt;采用源码安装方式,首先去官网拉取源代码并解压,由于rabbitmq是采用erlang编写的 所以得先安装erlang环境,这里假设erlang环境已经安装好了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.4.0/rabbitmq-server-3.4.0.tar.gz

tar -zxf rabbitmq-server-3.4.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="rabbitmq" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/rabbitmq/"/>
    
    
      <category term="rabbitmq" scheme="http://blog.seoui.com/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>emmet编写Html</title>
    <link href="http://blog.seoui.com/2016/10/16/html-emmet/"/>
    <id>http://blog.seoui.com/2016/10/16/html-emmet/</id>
    <published>2016-10-15T16:00:00.000Z</published>
    <updated>2016-11-11T02:11:09.828Z</updated>
    
    <content type="html"><![CDATA[<p> Emmet是一个Web开发人员的工具包，可以大大提高你的HTML和CSS的工作流,这是在<a href="http://docs.emmet.io/" title="Emmet" target="_blank" rel="external">emmet官方文档</a>中看到的第一句话,当然这句话也简单的概括了它拥有的魅力。</p>
<p> 下面是在WebStorm中作一些应用。<br><a id="more"></a></p>
<h2 id="构建一张html网页"><a href="#构建一张html网页" class="headerlink" title="构建一张html网页"></a>构建一张html网页</h2><p>  一张基本的网页结构一般是具有<code>&lt;html&gt;</code> <code>&lt;head&gt;</code> <code>&lt;body&gt;</code> ,使用emmet只需要按一个tab键的时间就可以实现，输入<code>!</code>,然后按Tab键就能实现如下效果,</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></div><div class="line">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maxeimum-scale=1.0, minimum-scale=1.0"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 上面的效果使用<code>html:5</code> 然后按Tab键同样也能实现,如果是html4可以用<code>html:4s</code> ,xhtml用<code>html:xt</code> 然后按Tab键。</p>
<h2 id="添加元素及属性"><a href="#添加元素及属性" class="headerlink" title="添加元素及属性"></a>添加元素及属性</h2><p>为元素添加class或者id 如输入<code>span.clsspan#myspan</code> 按Tab 会生成如下代码</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"clsspan"</span> <span class="attr">id</span>=<span class="string">"myspan"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>为元素添加属性值 如输入<code>span{this is my span !!!}+a[href=http://blog.seoui.com]</code></p>
 <figure class="highlight html"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>this is my span !!!<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://blog.seoui.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="标签结构嵌套"><a href="#标签结构嵌套" class="headerlink" title="标签结构嵌套"></a>标签结构嵌套</h2><p> <code>&gt;</code> 子元素标记</p>
<p> <code>+</code> 同级元素追加标记</p>
<p> <code>^</code> 向当前父级元素追加标记</p>
<p>添加子元素实例 如 <code>span&gt;p.item</code> </p>
 <figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>添加同级元素实例 如 <code>span+p.item</code> </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>添加父级元素实例 如 <code>span&gt;div^p</code> </p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>以上虽然能轻松实现一些html的元素构建,但是如果遇到批量或者很多的类似的元素怎么办呢?</p>
<p>分组其实就是用<code>()</code>把标记分开,让他们成为一个独立的块。</p>
<p>如 <code>(div.item&gt;p)+(div.deatil&gt;span)</code> 然后按tab会生成以下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"deatil"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果我想重复生成2次上面的结构,使用<code>((div.item&gt;p)+(div.deatil&gt;span))*2</code>就能实现</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"deatil"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"deatil"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>生成多个带属性的元素 如 <code>ul&gt;li.item$*2</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="隐式标签"><a href="#隐式标签" class="headerlink" title="隐式标签"></a>隐式标签</h2><p>所谓隐式标签就是可以不用声明标签名称可以直接操作 如<code>.item</code>会生成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然不会很死板的一直生成div 隐式标签会根据父元素来生成适当的标签 如在ul内部使用隐式标签则会生成li。</p>
<p>li 、tr 、 td 、 option 都是隐式标签</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; Emmet是一个Web开发人员的工具包，可以大大提高你的HTML和CSS的工作流,这是在&lt;a href=&quot;http://docs.emmet.io/&quot; title=&quot;Emmet&quot;&gt;emmet官方文档&lt;/a&gt;中看到的第一句话,当然这句话也简单的概括了它拥有的魅力。&lt;/p&gt;
&lt;p&gt; 下面是在WebStorm中作一些应用。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="emmet" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/emmet/"/>
    
    
      <category term="emmet" scheme="http://blog.seoui.com/tags/emmet/"/>
    
  </entry>
  
  <entry>
    <title>supervisor配置和使用</title>
    <link href="http://blog.seoui.com/2016/07/07/supervisor/"/>
    <id>http://blog.seoui.com/2016/07/07/supervisor/</id>
    <published>2016-07-06T16:00:00.000Z</published>
    <updated>2016-11-11T02:11:09.828Z</updated>
    
    <content type="html"><![CDATA[<p> supervisor是一个制作守护进程的工具,用户可以在UNIX系统中监控、管理进程。常用于管理与某个用户或项目相关的进程。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p> 采用源码安装的方式,切换到3.1.3这个版本安装。</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"></div><div class="line">git clone https://github.com/Supervisor/supervisor.git</div><div class="line">cd supervisor</div><div class="line">   git checkout 3.1.3</div><div class="line">   python setup.py install</div></pre></td></tr></table></figure>
<a id="more"></a>
<p> 生成默认的supervisor配置文件</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><div class="line"></div><div class="line">echo_supervisord_conf &gt; /etc/supervisord.conf</div></pre></td></tr></table></figure>
<h3 id="修改自定义配置"><a href="#修改自定义配置" class="headerlink" title="修改自定义配置"></a>修改自定义配置</h3><p>   vim /etc/supervisord.conf </p>
<p>  提供web界面访问需要设置 inet_http_server </p>
<p>  需要配置一下supervisorctl的serverurl 这个地址必须匹配inet_http_server节点的port</p>
<p>  另外要去掉include的注释 用include的方式来引入supervisor进程, 而不需要每次都去修改 /etc/supervisord.conf,files指定为/etc/supervisor/*.conf,只要在/etc/supervisor目录下.conf结尾的文件都需要被supervisor加载。</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><div class="line">   </div><div class="line">  [inet_http_server]         ; inet (TCP) server disabled by default</div><div class="line">port=0.0.0.0:9001        ; (ip_address:port specifier, *:port for all iface)</div><div class="line">;username=user              ; (default is no username (open server))</div><div class="line">;password=123 </div><div class="line"> </div><div class="line">  </div><div class="line">[supervisorctl]</div><div class="line">;serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket</div><div class="line">serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket</div><div class="line"></div><div class="line">[include]</div><div class="line">files=/etc/supervisor/*.conf</div></pre></td></tr></table></figure>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p> 1、首先编写一段测试程序,这段代码是从网络上下载的,并非自己编写的。</p>
<p> vim test_http.py </p>
 <figure class="highlight python"><table><tr><td class="code"><pre><div class="line">  </div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> BaseHTTPServer</div><div class="line"><span class="keyword">from</span> SimpleHTTPServer <span class="keyword">import</span> SimpleHTTPRequestHandler</div><div class="line">HandlerClass = SimpleHTTPRequestHandler</div><div class="line">ServerClass = BaseHTTPServer.HTTPServer</div><div class="line">Protocol = <span class="string">"HTTP/1.0"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">if</span> sys.argv[<span class="number">1</span>:]:</div><div class="line">        port = int(sys.argv[<span class="number">1</span>])</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        port = <span class="number">8000</span></div><div class="line"></div><div class="line">    server_address = (<span class="string">'0.0.0.0'</span>, port)</div><div class="line">    HandlerClass.protocol_version = Protocol</div><div class="line">    httpd = ServerClass(server_address, HandlerClass)</div><div class="line"></div><div class="line">    sa = httpd.socket.getsockname()</div><div class="line">    <span class="keyword">print</span> <span class="string">"Serving HTTP on"</span>, sa[<span class="number">0</span>], <span class="string">"port"</span>, sa[<span class="number">1</span>], <span class="string">"..."</span></div><div class="line">    httpd.serve_forever()</div></pre></td></tr></table></figure>
<p> 2、编写进程守护.conf文件</p>
<p>  vim /etc/supervisor/test_http.conf </p>
<p>  program：后面进程名称</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><div class="line"></div><div class="line">[program:test_http]</div><div class="line">command=python test_http.py 501  ; 被监控的进程路径</div><div class="line">directory=/root/supervisor    ; 执行前先cd到目录去</div><div class="line">priority=1                    ;数字越高，优先级越高</div><div class="line">numprocs=1                    ; 启动几个进程</div><div class="line">autostart=true                ; 随着supervisord的启动而启动</div><div class="line">autorestart=true              ; 自动重启。。当然要选上了</div><div class="line">startretries=10               ; 启动失败时的最多重试次数</div><div class="line">exitcodes=0                   ; 正常退出代码（是说退出代码是这个时就不再重启了吗？待确定）</div><div class="line">stopsignal=KILL               ; 用来杀死进程的信号</div><div class="line">stopwaitsecs=10               ; 发送SIGKILL前的等待时间</div><div class="line">redirect_stderr=true          ; 重定向stderr到stdout</div><div class="line">stdout_logfile=/tmp/log/supervisor.log  ;日志目录</div></pre></td></tr></table></figure>
<h3 id="启动并加载配置信息"><a href="#启动并加载配置信息" class="headerlink" title="启动并加载配置信息"></a>启动并加载配置信息</h3><p>  不输出其他异常信息则表示启动并加载配置成功,接下来可以使用 supervisorctl 查看状态信息。看到一个进程名称为test_http。<br>  可以在客户端远程访问这个supervisor网页控制台。curl <a href="http://127.0.0.1:9001" target="_blank" rel="external">http://127.0.0.1:9001</a> 能看到网页信息就证明是OK的。<br>  当然可以在远程浏览器访问<a href="http://xxxxx:9001" target="_blank" rel="external">http://xxxxx:9001</a> 可以启动 停止 甚至是查看日志等功能。</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><div class="line"></div><div class="line">supervisord -c /etc/supervisord.conf </div><div class="line">supervisorctl status</div><div class="line">test_http                        RUNNING   pid 16013, uptime 0:14:22</div></pre></td></tr></table></figure>
<p> supervisorctl 常用的命令有 start,restart,stop,stop all,reload等。</p>
<p> 另外还有一个很重要的概览group<br> <figure class="highlight html"><table><tr><td class="code"><pre><div class="line">[group:test_gourp];定义分分组 test_gourp</div><div class="line">programs=test_http   ；分组中包含程序 test_http 多个需要使用,分隔。</div><div class="line">priority=1</div><div class="line">log_stderr=true</div><div class="line">logfile_maxbytes=1MB</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; supervisor是一个制作守护进程的工具,用户可以在UNIX系统中监控、管理进程。常用于管理与某个用户或项目相关的进程。&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt; 采用源码安装的方式,切换到3.1.3这个版本安装。&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git clone https://github.com/Supervisor/supervisor.git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd supervisor&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   git checkout 3.1.3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   python setup.py install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="linux" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    
      <category term="linux" scheme="http://blog.seoui.com/tags/linux/"/>
    
      <category term="supervisor" scheme="http://blog.seoui.com/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>gzip 和 zip在linux上的使用</title>
    <link href="http://blog.seoui.com/2016/07/04/gzip-uzip/"/>
    <id>http://blog.seoui.com/2016/07/04/gzip-uzip/</id>
    <published>2016-07-03T16:00:00.000Z</published>
    <updated>2016-11-11T02:11:09.828Z</updated>
    
    <content type="html"><![CDATA[<p> 文件的压缩/解压无论是在哪个操作系统上都比较常用 简答在这里演示一下。</p>
<p>##zip</p>
<p> zip会把文件打包为.zip格式的文件包，比如 abc.zip</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><div class="line"></div><div class="line">zip abc.zip testabc.txt</div></pre></td></tr></table></figure>
<p>  上面的shell会把testabc.txt压缩在当前目录下的abc.zip文件中 当然你也可以指定压缩到你指定的路径如  zip /opt/abc.zip testabc.txt</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><div class="line"></div><div class="line">unzip abc.zip</div></pre></td></tr></table></figure>
<p>  把abc.zip包解压到当前目录 如需指定解压到其他目录 需要指定-d 参数 如  unzip abc.zip -d /opt/abc</p>
<p>##gzip</p>
<p>  从压缩后的压缩包文件格式上与zip命令不同的是gzip压缩后的文件格式为.gz </p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><div class="line">   </div><div class="line">//压缩为文件 abc.txt.gz 会删除原有的abc.txt文件</div><div class="line">gzip abc.txt </div><div class="line">   //解压abc.txt.gz 会删除原有的abc.txt.gz文件 </div><div class="line"></div><div class="line">   gunzip abc.txt.gz </div><div class="line">  </div><div class="line">  //如需要保留原来的压缩文件 需要加-c 参数 </div><div class="line">  // gzip -c abc.txt &gt; /root/abc.gz </div><div class="line">  // gunzip -c /abc.gz &gt; ./abc.txt</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 文件的压缩/解压无论是在哪个操作系统上都比较常用 简答在这里演示一下。&lt;/p&gt;
&lt;p&gt;##zip&lt;/p&gt;
&lt;p&gt; zip会把文件打包为.zip格式的文件包，比如 abc.zip&lt;/p&gt;
 &lt;figure class=&quot;highlight powershell&quot;&gt;&lt;tabl
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="linux" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    
      <category term="linux" scheme="http://blog.seoui.com/tags/linux/"/>
    
      <category term="unzip" scheme="http://blog.seoui.com/tags/unzip/"/>
    
      <category term="gunzip" scheme="http://blog.seoui.com/tags/gunzip/"/>
    
  </entry>
  
  <entry>
    <title>Hello Docker</title>
    <link href="http://blog.seoui.com/2016/06/18/docker.install/"/>
    <id>http://blog.seoui.com/2016/06/18/docker.install/</id>
    <published>2016-06-17T16:00:00.000Z</published>
    <updated>2016-11-11T02:11:09.827Z</updated>
    
    <content type="html"><![CDATA[<p>接触docker容器有这么几周的时间了,顺便在这里记录一下这段岁月,无特殊说明<br>操作系统均为 centos7</p>
<p>1、首先安装docker</p>
<p> 参考 <a href="https://docs.docker.com/linux/step_one/" title="https://docs.docker.com/linux/step_one/" target="_blank" rel="external">https://docs.docker.com/linux/step_one/</a></p>
<p> 检查有没有安装curl 如果没有安装可以使用 apt-get install curl  安装curl,已经安装了则忽略。 </p>
<pre><code>which curl
</code></pre><p> 安装最新的版本Docker 执行命令 自动根据自身环境安装</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><div class="line"></div><div class="line">curl -fsSL https://get.docker.com/ | sh</div></pre></td></tr></table></figure>
<p> 验证安装是否成功</p>
  <figure class="highlight html"><table><tr><td class="code"><pre><div class="line">   docker version</div><div class="line">  </div><div class="line">Client:</div><div class="line"> Version:      1.11.2</div><div class="line"> API version:  1.23</div><div class="line"> Go version:   go1.5.4</div><div class="line"> Git commit:   b9f10c9</div><div class="line"> Built:        Wed Jun  1 21:47:50 2016</div><div class="line"> OS/Arch:      linux/amd64</div><div class="line"></div><div class="line">Server:</div><div class="line"> Version:      1.11.2</div><div class="line"> API version:  1.23</div><div class="line"> Go version:   go1.5.4</div><div class="line"> Git commit:   b9f10c9</div><div class="line"> Built:        Wed Jun  1 21:47:50 2016</div><div class="line"> OS/Arch:      linux/amd64</div></pre></td></tr></table></figure>
<p> 输出docker版本号信息 则表示成功</p>
<p>2、运行第一个Docker容器 busybox</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><div class="line">  </div><div class="line">docker run -it --rm busybox</div></pre></td></tr></table></figure>
<p>  busybox是一个很小的linux系统 只有1M的样子吧,执行完这个命令后 docker会首先检查本地镜像有没有叫busybox,如果没有会去中央仓库拉取（pull）,拉取完成后运行(run) 这个容器,参数-it 表示命令行交互 –rm表示运行结束后立即删除这个容器。</p>
<p> 这里有2个概念 pull拉取出来的叫做镜像(image) run运行的叫做容器(container),一个image可以有多个container,镜像有自己的镜像ID ,容器也有自己的容器ID,这里可以描述得不太好，大概就是意思。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接触docker容器有这么几周的时间了,顺便在这里记录一下这段岁月,无特殊说明&lt;br&gt;操作系统均为 centos7&lt;/p&gt;
&lt;p&gt;1、首先安装docker&lt;/p&gt;
&lt;p&gt; 参考 &lt;a href=&quot;https://docs.docker.com/linux/step_one/
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="docker" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/docker/"/>
    
    
      <category term="docker" scheme="http://blog.seoui.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu设置网络</title>
    <link href="http://blog.seoui.com/2016/06/17/ubuntu.networksetting/"/>
    <id>http://blog.seoui.com/2016/06/17/ubuntu.networksetting/</id>
    <published>2016-06-16T16:00:00.000Z</published>
    <updated>2016-11-11T02:11:09.827Z</updated>
    
    <content type="html"><![CDATA[<p> 用惯了centos 偶尔装了一次ubuntu版本为14.04来玩一玩发现设置静态网络(static)后不能上外网，在这里记录一下如何设置的。</p>
<p> 1、首页静态IP参数 编辑文件 vim /etc/network/interfaces</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><div class="line"></div><div class="line">auto eth0</div><div class="line">iface eth0 inet static</div><div class="line">address <span class="number">172.168</span>.<span class="number">101.245</span></div><div class="line">netmask <span class="number">255.255</span>.<span class="number">255.0</span></div><div class="line">gateway <span class="number">172.168</span>.<span class="number">101.254</span></div><div class="line">nameserver <span class="number">61.128</span>.<span class="number">128.68</span></div></pre></td></tr></table></figure>
<p> 设置好后重启网卡  /etc/init.d/networking restart  然而并不能解析DNS</p>
<p> 2、配置dns 编辑文件 vim /etc/resolv.conf </p>
<p>  根据我所在网络环境设置如下DNS </p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><div class="line">nameserver <span class="number">114.114</span>.<span class="number">114.114</span></div><div class="line">nameserver <span class="number">61.128</span>.<span class="number">128.68</span></div></pre></td></tr></table></figure>
<p> 此时 如果有外网 应该是可以ping了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 用惯了centos 偶尔装了一次ubuntu版本为14.04来玩一玩发现设置静态网络(static)后不能上外网，在这里记录一下如何设置的。&lt;/p&gt;
&lt;p&gt; 1、首页静态IP参数 编辑文件 vim /etc/network/interfaces&lt;/p&gt;
 &lt;figure 
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="linux" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/linux/"/>
    
    
      <category term="linux" scheme="http://blog.seoui.com/tags/linux/"/>
    
      <category term="ubuntu" scheme="http://blog.seoui.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>form表单默认回车事件的问题</title>
    <link href="http://blog.seoui.com/2016/05/24/html-form-enterevent/"/>
    <id>http://blog.seoui.com/2016/05/24/html-form-enterevent/</id>
    <published>2016-05-23T16:00:00.000Z</published>
    <updated>2016-11-11T02:11:09.827Z</updated>
    
    <content type="html"><![CDATA[<p>经常写form表单以前没有怎么注意 无意中注意到一些元素组成的默认事件。</p>
<p>在form表单中 目前发现具备以下情况会默认支持回车事件提交表单</p>
<ol>
<li>所有的表单元素中只有1个text 无论提交按钮是否为type=submit</li>
<li><p>表单中的提交按钮type=submit</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"></div><div class="line">//此代码默认就具有了回车提交表单的事件  需要格外小心</div><div class="line"> <span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"button"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果我们的表单中仅有一个text的话怎么阻止默认回车事件呢?</p>
<p>可以在表单中多加一个隐藏的text</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"button"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>示例demo 具有默认事件：<a href="http://peachyy.github.io/demos/htmlformenterevent/index.html" title="http://peachyy.github.io/demos/" target="_blank" rel="external">http://peachyy.github.io/demos/htmlformenterevent/index.html</a></p>
<p>示例demo 不具有默认事件：<a href="http://peachyy.github.io/demos/htmlformenterevent/index2.html" title="http://peachyy.github.io/demos/" target="_blank" rel="external">http://peachyy.github.io/demos/htmlformenterevent/index.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经常写form表单以前没有怎么注意 无意中注意到一些元素组成的默认事件。&lt;/p&gt;
&lt;p&gt;在form表单中 目前发现具备以下情况会默认支持回车事件提交表单&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有的表单元素中只有1个text 无论提交按钮是否为type=submit&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="from" scheme="http://blog.seoui.com/tags/from/"/>
    
  </entry>
  
  <entry>
    <title>利用selenium做网页自动测试</title>
    <link href="http://blog.seoui.com/2016/04/13/selenium-autowebTest/"/>
    <id>http://blog.seoui.com/2016/04/13/selenium-autowebTest/</id>
    <published>2016-04-12T16:00:00.000Z</published>
    <updated>2016-11-11T02:11:09.827Z</updated>
    
    <content type="html"><![CDATA[<p> 最近在做一个简单新浪微博抓取功能,遇到了请求被新浪拦截,正因为如此了解到selenium。</p>
<p> <a href="http://docs.seleniumhq.org/" title="selenium" target="_blank" rel="external">selenium</a> 是一个web的自动化测试工具。运用好它能够完成很多自动化测试功能甚至会让你感到很多出乎意料的事情。</p>
<p> 接下来做一件简单而大气的事情（这里使用java语言）,模拟一个chrome浏览器访问 <a href="http://www.weibo.com" target="_blank" rel="external">http://www.weibo.com</a> 自动输入微博用户名和密码 自动点击登录,当登录成功后给用户一个反馈。</p>
<p> 必须需要一个浏览器驱动包 可以到<a href="http://docs.seleniumhq.org/download/下载" target="_blank" rel="external">http://docs.seleniumhq.org/download/下载</a> 需要匹配自己的操作系统 以及浏览器 下载对应的版本。</p>
<p> 比如 我的驱动放在了本地磁盘 E:\Dev\devPlugins\chromedriver.exe 路径。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunApp</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">        <span class="comment">//创建一个chrome驱动</span></div><div class="line">        ChromeDriverService service = <span class="keyword">new</span> ChromeDriverService.Builder()</div><div class="line">                .usingDriverExecutable(</div><div class="line">                        <span class="keyword">new</span> File(</div><div class="line">                                <span class="string">"E:\\Dev\\devPlugins\\chromedriver.exe"</span>))</div><div class="line">                .usingAnyFreePort().build();</div><div class="line">        service.start();</div><div class="line">        WebDriver driver = <span class="keyword">new</span> RemoteWebDriver(service.getUrl(),</div><div class="line">                DesiredCapabilities.chrome());</div><div class="line"></div><div class="line">        <span class="comment">//访问weibo.com站点</span></div><div class="line">        driver.get(<span class="string">"http://www.weibo.com?t="</span>+System.currentTimeMillis());</div><div class="line"></div><div class="line">        <span class="comment">//等待网站是否刷新完成  如果30秒还没有响应则认为超时了</span></div><div class="line">        (<span class="keyword">new</span> WebDriverWait(driver,<span class="number">30</span>)).until(<span class="keyword">new</span> ExpectedCondition&lt;Boolean&gt;() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">apply</span><span class="params">(WebDriver d)</span> </span>&#123;</div><div class="line">                <span class="comment">//使用域名判断是否跳转到登录页面</span></div><div class="line">                <span class="keyword">return</span> d.getCurrentUrl().toLowerCase().startsWith(<span class="string">"http://weibo.com"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="comment">// 显示搜索结果页面的 title</span></div><div class="line">        System.out.println(<span class="string">"打印一下网页的TITLE: "</span> + driver.getTitle());</div><div class="line">        <span class="comment">//点击用户登录的窗口</span></div><div class="line">        <span class="comment">//这里的path可以开发开发人员工具 复制xpath</span></div><div class="line">        WebElement element = driver.findElement(</div><div class="line">		  By.xpath(<span class="string">"//*[@id=\"pl_login_form\"]/div[2]/div[1]/div/a[2]"</span>));</div><div class="line">        element.click();</div><div class="line">        <span class="comment">//自动输入用户名数据</span></div><div class="line">        WebElement userId=element.findElement(</div><div class="line">		  By.xpath(<span class="string">"//*[@id=\"loginname\"]"</span>));</div><div class="line">        WebElement password=element.findElement(</div><div class="line">          By.xpath(<span class="string">"//*[@id=\"pl_login_form\"]/div[2]/div[3]/div[2]/div/input"</span>));</div><div class="line">        WebElement submit= element.findElement(</div><div class="line">          By.xpath(<span class="string">"//*[@id=\"pl_login_form\"]/div[2]/div[3]/div[6]/a"</span>));</div><div class="line">        <span class="comment">//你的微博账号</span></div><div class="line">        userId.sendKeys(<span class="string">"22222"</span>);</div><div class="line">        <span class="comment">//你的微博密码</span></div><div class="line">        password.sendKeys(<span class="string">"xxxxxxx"</span>);</div><div class="line">        <span class="comment">//触发登录动作</span></div><div class="line">        submit.click();</div><div class="line">        System.out.println(<span class="string">"点击登录了"</span>);</div><div class="line">        <span class="comment">//等待是否登录成功 超时时间600秒</span></div><div class="line">        (<span class="keyword">new</span> WebDriverWait(driver, <span class="number">600</span>)).until(<span class="keyword">new</span> ExpectedCondition&lt;Boolean&gt;() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">apply</span><span class="params">(WebDriver d)</span> </span>&#123;</div><div class="line">                <span class="comment">//根据网页标题来辨别是否登录成功 如果成功后新浪微博标题为 我的首页 ************</span></div><div class="line">                <span class="keyword">return</span> d.getTitle().startsWith(<span class="string">"我的首页"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        System.out.println(<span class="string">"登录完成 你可以开始刷微博了   准备获取cookies"</span>);</div><div class="line">        Collection set= driver.manage().getCookies();</div><div class="line"></div><div class="line">        <span class="comment">// 关闭浏览器</span></div><div class="line">       <span class="comment">// driver.quit();</span></div><div class="line">        <span class="comment">// 关闭 ChromeDriver 接口</span></div><div class="line">       <span class="comment">// service.stop();</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改自己的微博账号和密码后，直接使用控制台运行这个程序 就可以自动打开浏览器 自动输入账号密码 自动登录。有时候会出现验证码的情况需要自己输入验证码。</p>
<p> 源代码地址:<a href="https://github.com/peachyy/demos/blob/master/selenium-demo.rar" title="https://github.com/peachyy/demos/blob/master/selenium-demo.rar" target="_blank" rel="external">https://github.com/peachyy/demos/blob/master/selenium-demo.rar</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 最近在做一个简单新浪微博抓取功能,遇到了请求被新浪拦截,正因为如此了解到selenium。&lt;/p&gt;
&lt;p&gt; &lt;a href=&quot;http://docs.seleniumhq.org/&quot; title=&quot;selenium&quot; target=&quot;_blank&quot; rel=&quot;extern
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="selenium" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/selenium/"/>
    
      <category term="测试" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/selenium/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="selenium" scheme="http://blog.seoui.com/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>让IE浏览器支持SVG动画</title>
    <link href="http://blog.seoui.com/2016/03/16/svganimate-ie-support/"/>
    <id>http://blog.seoui.com/2016/03/16/svganimate-ie-support/</id>
    <published>2016-03-15T16:00:00.000Z</published>
    <updated>2016-11-11T02:11:09.826Z</updated>
    
    <content type="html"><![CDATA[<p>在IE浏览器上 无论是否=IE11 svg动画元素animate都得不到支持 接下来的事情就是让IE浏览器能够支持svg动画元素 包括 animate、animateTransform、animateMotion、animateColor、set 元素</p>
<p>如果是IE内核的浏览器可以引入以下脚本</p>
<p>在html文档中使用 引入script</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"smil.check.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在svg文件中使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">elements..</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ecmascript"</span> <span class="attr">xlink:href</span>=<span class="string">"smil.check.js"</span> /&gt;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接下来就由奇迹发生了 在IE中svg动画元素居然可以动了。</p>
<p>经过测试感觉动画的偏移不是特别精确 如果需要特别精确的话 估计这个还是有些问题。</p>
<p>此文参考</p>
<p>   <a href="http://stackoverflow.com/questions/15738752/svg-animation-not-working-ie9-ie10" title="http://stackoverflow.com/questions/15738752/svg-animation-not-working-ie9-ie10" target="_blank" rel="external">http://stackoverflow.com/questions/15738752/svg-animation-not-working-ie9-ie10</a></p>
<p>另外smil.check.js托管在github地址为:</p>
<p><a href="https://github.com/FakeSmile/FakeSmile" title="https://github.com/FakeSmile/FakeSmile" target="_blank" rel="external">https://github.com/FakeSmile/FakeSmile</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在IE浏览器上 无论是否=IE11 svg动画元素animate都得不到支持 接下来的事情就是让IE浏览器能够支持svg动画元素 包括 animate、animateTransform、animateMotion、animateColor、set 元素&lt;/p&gt;
&lt;p&gt;如果是
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="svg" scheme="http://blog.seoui.com/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 安装mysql</title>
    <link href="http://blog.seoui.com/2016/03/09/centos7.install.mysql/"/>
    <id>http://blog.seoui.com/2016/03/09/centos7.install.mysql/</id>
    <published>2016-03-08T16:00:00.000Z</published>
    <updated>2016-11-11T02:11:09.826Z</updated>
    
    <content type="html"><![CDATA[<p>正常情况下一般都会选择yum安装 原因都知道 简单 快捷，但在安装Mysql时却总是不顺利。</p>
<p>所以这里记录一下</p>
<p>首先去拉取rpm文件 </p>
 <figure class="highlight html"><table><tr><td class="code"><pre><div class="line"></div><div class="line">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</div></pre></td></tr></table></figure>
<p>安装rpm并安装mysql-community-server</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><div class="line"></div><div class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</div><div class="line"></div><div class="line">yum install mysql-community-server</div></pre></td></tr></table></figure>
<p>安装完成后<br>设置密码 注意设置密码之前最好重启一下mysqld</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><div class="line"> </div><div class="line">service mysqld restart</div><div class="line">mysql -uroot</div><div class="line">set password for ‘root’@‘localhost’ = password('mypasswd');</div></pre></td></tr></table></figure>
<p>如有需要可以  设置一下允许远程访问</p>
 <figure class="highlight html"><table><tr><td class="code"><pre><div class="line">update user set host = '%' where user ='root';</div><div class="line">flush privileges;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正常情况下一般都会选择yum安装 原因都知道 简单 快捷，但在安装Mysql时却总是不顺利。&lt;/p&gt;
&lt;p&gt;所以这里记录一下&lt;/p&gt;
&lt;p&gt;首先去拉取rpm文件 &lt;/p&gt;
 &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="mysql" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/mysql/"/>
    
    
      <category term="centos" scheme="http://blog.seoui.com/tags/centos/"/>
    
      <category term="mysql" scheme="http://blog.seoui.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>springMvc支持jsonp适配</title>
    <link href="http://blog.seoui.com/2016/03/02/springmvcsupportjsonp/"/>
    <id>http://blog.seoui.com/2016/03/02/springmvcsupportjsonp/</id>
    <published>2016-03-01T16:00:00.000Z</published>
    <updated>2016-11-11T02:11:09.826Z</updated>
    
    <content type="html"><![CDATA[<p>这里测试的是spring mvc4的版本 </p>
<p>定义一个扩展类 必须要加上@ControllerAdvice增加处理<br><figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonpSupportAdvice</span> <span class="keyword">extends</span> <span class="title">AbstractJsonpResponseBodyAdvice</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonpSupportAdvice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//参数包含callback的时候 使用jsonp的反馈形式</span></div><div class="line">		<span class="keyword">super</span>(<span class="string">"callback"</span>, <span class="string">"jsonp"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>并配置好映射 jsonp –application/javascript<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span></span></div><div class="line">	<span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.ContentNegotiatingViewResolver"</span></div><div class="line">	<span class="attr">p:order</span>=<span class="string">"0"</span> <span class="attr">p:defaultContentType</span>=<span class="string">"text/html"</span> <span class="attr">p:ignoreAcceptHeader</span>=<span class="string">"true"</span></div><div class="line">	<span class="attr">p:favorPathExtension</span>=<span class="string">"true"</span> <span class="attr">p:favorParameter</span>=<span class="string">"true"</span> <span class="attr">p:parameterName</span>=<span class="string">"content"</span>&gt;</div><div class="line">	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mediaTypes"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"html"</span> <span class="attr">value</span>=<span class="string">"text/html"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"pdf"</span> <span class="attr">value</span>=<span class="string">"application/pdf"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"xsl"</span> <span class="attr">value</span>=<span class="string">"application/vnd.ms-excel"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"xml"</span> <span class="attr">value</span>=<span class="string">"application/xml"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"json"</span> <span class="attr">value</span>=<span class="string">"application/json"</span> /&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"jsonp"</span> <span class="attr">value</span>=<span class="string">"application/javascript"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	.......</div><div class="line">	.....</div></pre></td></tr></table></figure></p>
<p>OK 到这里配置完成 访问请求的时候只需加上callback参数即为jsonp的数据返回格式。        </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里测试的是spring mvc4的版本 &lt;/p&gt;
&lt;p&gt;定义一个扩展类 必须要加上@ControllerAdvice增加处理&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="springmvc" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/springmvc/"/>
    
    
      <category term="java" scheme="http://blog.seoui.com/tags/java/"/>
    
      <category term="springmvc" scheme="http://blog.seoui.com/tags/springmvc/"/>
    
  </entry>
  
  <entry>
    <title>分享几个常用的Google Chrome插件</title>
    <link href="http://blog.seoui.com/2016/01/25/share-chrome-plugin/"/>
    <id>http://blog.seoui.com/2016/01/25/share-chrome-plugin/</id>
    <published>2016-01-24T16:00:00.000Z</published>
    <updated>2016-11-11T02:11:09.826Z</updated>
    
    <content type="html"><![CDATA[<p>在这里分享几个 个人常用的Google Chrome浏览器插件 保证实用。</p>
<p>由于个人目前的工作会写一些代码 所以优先介绍几个GitHub插件</p>
<p>1.OctoTree</p>
<p> 扩展Chrome浏览器在浏览GitHub代码的时候能像本地文件系统一样列出一棵树，可以用于GitHub、GitLab</p>
<p> <img src="http://static.1.seoui.com/images/2016/01/2016-01-25-share-chrome-plugin-01.png" alt="Octotree"></p>
<p>2.Isometric Contributions</p>
<p> 支持在GitHub个人主页的图表统计转换柱状的图表统计 更能直观的看出提交代码的频率 就像盖房子一样。</p>
<p> <img src="http://static.1.seoui.com/images/2016/01/2016-01-25-share-chrome-plugin-02.png" alt="Isometric Contributions"></p>
<p>3.Avatars for Github</p>
<p>  在Github首页上有我关注的人已经关注的项目动态 使用此插件支持在关注的人前面加上头像 这样能更直观看到谁更新了动态信息。</p>
<p> <img src="http://static.1.seoui.com/images/2016/01/2016-01-25-share-chrome-plugin-03.png" alt="Avatars for Github"></p>
<p>4.ZenHub</p>
<p> 增强你的工作流，特别是启动，快速移动工程团队和开源社区等特性构建，支持实时拖拽 Issue Task Boards；通过一个 +1 按钮来进行反馈；支持直接上传任意的文件类型到 GitHub 接口。ZenHub 能把很多进程集中化到 GitHub，让你的团队更精炼更敏捷</p>
<p> <img src="http://static.1.seoui.com/images/2016/01/2016-01-25-share-chrome-plugin-04.png" alt="ZenHub"></p>
<p>5.Github Linker</p>
<p> GitHub Linker 支持连接到(相当于IDE里面的代码引用的感觉)NPM，bower，Composer &amp; Duo 到它们的 Github 库页面。它也解决了在 .js, .jsx, .coffee 或 .md 文件的 require() 声明     </p>
<p> <img src="http://static.1.seoui.com/images/2016/01/2016-01-25-share-chrome-plugin-05.png" alt="Github Linker"></p>
<p>API调用插件</p>
<p>6.JSONView</p>
<p>   JSONView是一个将JSON字符串转换为 可读性的格式查看 JSON 的插件。调用API时非常有用     </p>
<p> <img src="http://static.1.seoui.com/images/2016/01/2016-01-25-share-chrome-plugin-06.png" alt="JSONView"></p>
<p>Markdown插件</p>
<p>7.Markdown Editor</p>
<p>  支持在Chrome浏览器上所见即所得的编辑MarkDown文本，本人使用较少 但也比较实用 默认的风格为GitHub </p>
<p> <img src="http://static.1.seoui.com/images/2016/01/2016-01-25-share-chrome-plugin-07.png" alt="JSONView"></p>
<p>其他常用插件</p>
<p>8.Proxy SwitchySharp</p>
<p>  设置网络代理 翻墙必备</p>
<p> <img src="http://static.1.seoui.com/images/2016/01/2016-01-25-share-chrome-plugin-08.png" alt="JSONView"></p>
<p>9.Visual Event</p>
<p> 能更直观的看到网页DOM元素上的事件信息以及事件所触发的代码 前端开发神器</p>
<p> <img src="http://static.1.seoui.com/images/2016/01/2016-01-25-share-chrome-plugin-09.png" alt="JSONView"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这里分享几个 个人常用的Google Chrome浏览器插件 保证实用。&lt;/p&gt;
&lt;p&gt;由于个人目前的工作会写一些代码 所以优先介绍几个GitHub插件&lt;/p&gt;
&lt;p&gt;1.OctoTree&lt;/p&gt;
&lt;p&gt; 扩展Chrome浏览器在浏览GitHub代码的时候能像本地文件系统
    
    </summary>
    
      <category term="google chrome" scheme="http://blog.seoui.com/categories/google-chrome/"/>
    
    
      <category term="googleChrome" scheme="http://blog.seoui.com/tags/googleChrome/"/>
    
      <category term="chrome" scheme="http://blog.seoui.com/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>Hbase Shell在secureCRT中退格键问题解决方法</title>
    <link href="http://blog.seoui.com/2016/01/04/crtbackspacebug/"/>
    <id>http://blog.seoui.com/2016/01/04/crtbackspacebug/</id>
    <published>2016-01-03T16:00:00.000Z</published>
    <updated>2016-11-11T02:11:09.826Z</updated>
    
    <content type="html"><![CDATA[<p> 使用secureCRT操作Hbase Shell的时候 难免会按错字符,当输入出错后 一般会使用BackSpace(退格)键删除字符。很不巧的是BackSpace键不会当做delete命令,这时需要设置一下CRT 。</p>
<p> 首先在选项-&gt;会话选项-&gt;终端-&gt;仿真 终端设置为Linux；</p>
<p> 然后勾选下面2个checkbox </p>
<p>  在选项-&gt;会话选项-&gt;终端-&gt;仿真-&gt;映射键-&gt;其他设置 </p>
<ul>
<li>Backspace发送delete(B)</li>
<li>Delete发送backspace(S) </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 使用secureCRT操作Hbase Shell的时候 难免会按错字符,当输入出错后 一般会使用BackSpace(退格)键删除字符。很不巧的是BackSpace键不会当做delete命令,这时需要设置一下CRT 。&lt;/p&gt;
&lt;p&gt; 首先在选项-&amp;gt;会话选项-&amp;gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="hbase" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/hbase/"/>
    
    
      <category term="hbase" scheme="http://blog.seoui.com/tags/hbase/"/>
    
      <category term="secureCRT" scheme="http://blog.seoui.com/tags/secureCRT/"/>
    
  </entry>
  
  <entry>
    <title>apache + tomcat实现集群session同步</title>
    <link href="http://blog.seoui.com/2015/10/27/apachetomcatClustering/"/>
    <id>http://blog.seoui.com/2015/10/27/apachetomcatClustering/</id>
    <published>2015-10-26T16:00:00.000Z</published>
    <updated>2016-11-11T02:11:09.825Z</updated>
    
    <content type="html"><![CDATA[<p> 这次试验是用1台Apache2.2 、 2台tomcat服务器 、并使用Tomcat Connectors–mod_jk.so作为传送介质实现负载均衡。</p>
<p>项目之前在单机上跑 切换到集群环境中 发现一堆的问题出现了,当然还有未知没有发现的。</p>
<p>遗留的问题</p>
<ol>
<li>如果集群节点多了，发布项目的时候用什么方式发布会比较方便</li>
<li>文件存储的问题怎么解决</li>
<li>系统日志怎么才能实现统一</li>
<li>缓存服务怎么实现同步</li>
<li>数据库并发问题 </li>
</ol>
<p>针对这些问题将在后面的博文中提供解决方案！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 这次试验是用1台Apache2.2 、 2台tomcat服务器 、并使用Tomcat Connectors–mod_jk.so作为传送介质实现负载均衡。&lt;/p&gt;
&lt;p&gt;项目之前在单机上跑 切换到集群环境中 发现一堆的问题出现了,当然还有未知没有发现的。&lt;/p&gt;
&lt;p&gt;遗留
    
    </summary>
    
      <category term="技术" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="java" scheme="http://blog.seoui.com/categories/%E6%8A%80%E6%9C%AF/java/"/>
    
    
      <category term="apache" scheme="http://blog.seoui.com/tags/apache/"/>
    
      <category term="集群" scheme="http://blog.seoui.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
      <category term="session同步" scheme="http://blog.seoui.com/tags/session%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
</feed>
